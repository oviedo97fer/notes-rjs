{"version":3,"sources":["Components/Note/Note.jsx","Components/NoteForm/Form.js","config/config.js","App.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","noteId","noteContent","id","window","confirm","removeNote","_this2","react_default","a","createElement","className","onClick","handleRemove","Component","Form","addNote","bind","assertThisInitialized","textInput","value","focus","ref","input","placeholder","type","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","state","notes","app","firebase","initializeApp","db","database","child","on","snap","push","key","notesContent","val","setState","i","length","splice","note","set","remove","_this3","map","Components_Note_Note","NoteForm_Form","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f94cbaf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Note.css';\r\n\r\nclass Note extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.noteId = props.noteId;\r\n        this.noteContent = props.noteContent;\r\n    }\r\n    handleRemove(id){\r\n\r\n        const response = window.confirm('Â¿Borrar nota?');\r\n        if(response){\r\n            this.props.removeNote(id);\r\n        }\r\n        return;\r\n    }\r\n    render(){ \r\n        return(\r\n            <div className='Note'>\r\n                <span \r\n                onClick={()=> this.handleRemove(this.noteId)}>&times;</span>\r\n                <p>{this.noteContent}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Note;","import React, {Component} from 'react';\r\nimport './NoteForm.css';\r\n\r\nclass Form extends Component{\r\n    constructor(){\r\n        super()\r\n        this.addNote = this.addNote.bind(this);\r\n    }\r\n    addNote(){\r\n        this.props.addNote(this.textInput.value);\r\n        this.textInput.value = '';\r\n        this.textInput.focus();\r\n    }\r\n    render(){\r\n        return(\r\n            <div className='NoteForm'>\r\n                <input\r\n                ref={input=>{this.textInput = input;}}\r\n                placeholder='Write a note'\r\n                type='text' />\r\n                <button\r\n                onClick={this.addNote}>\r\n                    Add Note\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","export const DB_CONFIG = {\r\n    apiKey: \"AIzaSyD2NOI8m1nZgf-mt_hSHzSBiobCaMMpuig\",\r\n    authDomain: \"app-notas-70479.firebaseapp.com\",\r\n    databaseURL: \"https://app-notas-70479.firebaseio.com\",\r\n    projectId: \"app-notas-70479\",\r\n    storageBucket: \"app-notas-70479.appspot.com\",\r\n    messagingSenderId: \"1069209384728\"\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Note from './Components/Note/Note';\nimport Form from './Components/NoteForm/Form';\n\n//importando configuracion de Firebase\nimport { DB_CONFIG } from './config/config';\n//importando Firebase\nimport firebase from 'firebase';\nimport 'firebase/database';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.addNote = this.addNote.bind(this);\n    this.removeNote = this.removeNote.bind(this);\n    this.state={\n      notes: [\n        /* {noteId: 1, noteContent: 'note 1'},\n        {noteId: 2, noteContent: 'note 2'} */\n      ]\n    };\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.db= this.app.database().ref().child('notes');\n  }\n\n  componentDidMount(){\n    const notes = this.state.notes;\n    //para actualizar la vista al agregar:\n    this.db.on('child_added', snap=>{\n      notes.push({\n        noteId: snap.key,\n        notesContent: snap.val().noteContent\n      })\n      this.setState({\n        notes\n      })\n    });\n    //para actualizar la vista al borrar:\n    this.db.on('child_removed', snap=>{\n      for( let i = 0; i<notes.length; i++){\n        if(notes[i].noteId === snap.key){\n          notes.splice(i, 1);\n        }\n      }\n      this.setState({\n        notes\n      })\n    })\n  }\n\n  addNote(note){\n    /* let { notes } = this.state;\n    notes.push({\n      noteId: notes.length+1 ,\n      noteContent: note\n    });\n    this.setState({\n      notes\n    }); */\n\n    this.db.push().set({noteContent: note});\n  }\n  removeNote(noteId){\n    this.db.child(noteId).remove();\n  }\n\n  render() {\n    return (\n      <div className=\"notesContainer\">\n        <div className=\"notesHeader\">\n        <h1>React & Firebase App</h1>\n        </div>\n        <div className='notesBody'>\n          <ul>{\n            this.state.notes.map(note => {\n              return(\n               <Note\n               noteContent={note.noteContent}\n               noteId={note.noteId}\n               key={note.noteId}\n               removeNote={this.removeNote}\n               />\n              )\n            })\n          }\n          </ul>\n        </div>\n        <div className='notesFooter'>\n          <div>\n               <Form addNote={this.addNote}></Form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}